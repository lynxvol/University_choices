input$ECID
ECID <- input$ECID[8:10]
ECID
strsplit(ECID, '-')
?strsplit
k <- strsplit(ECID, '-')
k
k[1]
k[2]
k[3]
k[1:length(k)][1]
k[[1:length(k)]][1]
k$0
lapply(k, '[[',1)
lapply(k, '[',1)
lapply(k, '[',2)
lapply(k, '[',1)
k <- strsplit(input$ECID, '-')
k
lapply(k, '[',1)
k
fab <- lapply(k, '[',1)
fab
as.data.frame(fab)
input2 <- cbind(input1, fab)
input2 <- cbind(inpu, fab)
input2 <- cbind(input, fab)
head(input22)
head(input2)
fab <- as.data.frame(k)
fab <- as.data.frame(fab)
fab
input2 <- cbind(input, fab)
input2
k
unname(sapply(k,'[',1))
rm(list = ls())
quit()
a <- 100
b <- 200
c <- 300
rm(list = ls())
a1 <- 100
a2 <- 5
a3 <- 3
sum(a1:a3)
a1:a3
a3:a1
1:10
a1,10
sum(a1,10)
?sum
k <- 1:100
k[3] <- NA
k
sum(k)
sum(k, na.rm = T)
sum(k, na.rm = TRUE)
sum(1:100)
sum(k)
is.na(k)
rm(list = ls())
x <- 100
y <- 50.5
z <- "fifty"
class(x)
class(y)
class(z)
as.integer(x)
as.integer(y)
A <- 20
B <- 3
A + B
A - B
A/B
A*B
A^B
A%B
A%%B
source('C:/Users/B26124/Dropbox/Private/Master Data Science/2017-2018 SEM 1/WQD7004 Programming for Data Science/W2-TutMarks.R', echo=TRUE)
TotalMarks["Ahmad"]
TotalMarks/25
TotalMarks/25*100
rm(list = ls())
?cut
a <- 0:80
b <- cut(a, c(-Inf, 0, 18, 24,34,44,54,64,Inf))
b
c <- cbind(a,b)
c
c
str(c)
c$b
rm(c)
data.frame(a,b)
c <- data.frame(a,b)
c
str(c)
rm(list = ls())
a <- 0:100
b <- cut(a, c(-Inf, 0, 18, 24,34,44,54,64,Inf))
c <- data.frame(a,b)
summary(c)
?attach
attach(c)
a
b
detach(c)
a
b
a1 <- a
b1 <- b
rm(a)
rm(b)
attach(a)
attach(c)
a
b
a1
summary(a)
hist(a)
rm(a)
detach(c)
x <- 1:10
y <- x*2
mdl <- lm(y~x)
summary(mdl)
y <- x^2
y
mdl <- lm(y~x)
summary(mdl)
plot(x,y)
abline(mdl)
mdl$residuals
plot(mdl$residuals)
rm(list = ls())
x_1 <- rnorm(1000,5,7)
hist(x_1, col = "grey")
true_error <- rnorm(1000,0,2)
true_beta_0 <- 1.1
true_beta_1 <- -8.2
y <- true_beta_0 + true_beta_1*x_1 + true_error
hist(y)
plot(x_1, y, pch=20, col= "red")
mdl <- lm(y~x_1)
summary(mdl)
?rnorm
?setdiff
shiny::runApp('C:/Users/B26124/Dropbox/Data Science/09 Developing Data Products/Assignment/Week 4/Course_Project')
a <- 1:10
sapply(a, function(x) x*2)
lapply(a, function(x) x*2)
b <- lapply(a, function(x) x*2)
b
b <- sapply(a, function(x) x*2)
b
c <- rbind(a,b)
c
sapply(c, function(x) x*2)
lapply(c, function(x) x*2)
c
apply(c,1, sum)
sum(1:10)
apply(c,2, sum)
apply(c,2, class)
apply(c,1, class)
c <- 40:50
mylist <- list(a,b,c)
mylist
lapply(mylist,"[",,2)
lapply(mylist,"[",2)
lapply(mylist,3)
lapply(mylist,"[",5)
lapply(mylist,"[",1)
mylist[[2]]
mylist[2]
mylist
mylist[[2]]
mylist[[2,2]]
mylist[[2]]
mylist[2]
mylist[3]
mylist[[3]][1]
mylist[[2]][1]
mylist[[2]][10]
mylist[2][10]
mylist[2]
mylist[2][1]
mylist[2][[1]]
?mad
data("cars")
cars
?data
data("mtcars")
rm(cars)
mtcars
cars.use <- mtcars[,-c(1,2)]
cars.use
mtcars$car <- rownames(mtcars)
mtcars
rownames(mtcars) <- ""
rownames(mtcars) <- NULL
mtcars
apply(mtcars, 2, median)
str(mtcars)
cars.use <- mtcars(,-c(12))
cars.use <- mtcars[,-c(12)]
cars.use
apply(cars.use, 2, median)
apply(cars.use, 2, mean)
apply(cars.use, 2, mode)
apply(cars.use, 2, mod)
apply(cars.use, 2, mad)
?mad
?scale
?kmeans
data(mtcars)
kmeans(mtcars)
kmeans(mtcars, 5)
a <- kmeans(mtcars, 5)
a
a$cluster
k <- a$cluster
k
dim(k)
class(k)
k
names(k)
as.data.frame(k)
ordered(as.data.frame(k))
k <- as.data.frame(k)
k
ordered(k)
sort(k)
k$k
ordered(k$k)
k
dim(k)
order(k)
class(k)
k
order(k$k)
k[order(k$k),]
k[,order(k$k)]
k[order(k$k)]
k[order(k$k),]
k
b <- k[order(k$k)]
b <- k[order(k$k),]
b
k
rownames(k)
k$Cars <- rownames(k)
k
rownames(k) <- NULL
k
k[order(k$k)]
k[order(k$k),]
a
a$centers
mtcars
kmeans(mtcars, 4)
kmeans(mtcars, 5)
kmeans(mtcars, 6)
kmeans(mtcars, 3)
kmeans(mtcars, 2)
kmeans(mtcars, 1)
kmeans(mtcars, 5)
kmeans(mtcars, 6)
kmeans(mtcars, 7)
kmeans(mtcars, 8)
kmeans(mtcars, 8)$withinss
kmeans(mtcars, 8)$tot.withinss
kmeans(mtcars, 8)$totss
kmeans(mtcars, 8)$betweenss
kmeans(mtcars, 8)$size
kmeans(mtcars, 8)$iter
kmeans(mtcars, 4)
data(iris)
iris
kmeans(iris, 4)
kmeans(iris, 3)
kmeans(iris[,1:4], 4)
kmeans(iris[,1:4], 5)
kmeans(iris[,1:4], 3)
kmeans(iris[,1:4], 2)
kmeans(iris[,1:4], 3)
install.packages("dplyr")
library(dplyr)
library(dplyr)
data(mtcars)
mtcars_tbl <- tbl_df(mtcars)
mtcars
mtcars_tbl
# 1. Load mtcars into your R environment and look at the data and the way data is displayed on yr console.
data(mtcars)
# 2. Then convert mtcars data frame into mtcars tbl by > mtcars<-tbl(mtcars)
mtcars_tbl <- tbl_df(mtcars)
# 3. Compare the two displays.
mtcars
mtcars_tbl
glimpse(mtcars)
select(mtcars, cyl, disp, drat, wt)
select(mtcars_tbl, cyl, disp, drat, wt)
select(mtcars_tbl, starts_with("c"))
select(mtcars_tbl, starts_with("c"), ends_with("t"))
mtcars[c("cyl", "carb", "drat", "wt")]
mtcars_tbl[c("cyl", "carb", "drat", "wt")]
g1 <- mutate(mtcars_tbl, hpp = hp/100)
head(g1)
head(g1)
filter(mtcars_tbl, cyl == 8, gsec > 16)
filter(mtcars_tbl, cyl == 8, qsec > 16)
filter(mtcars_tbl, cyl == 6 | cyl == 8, qsec > 16)
filter(mtcars_tbl, cyl == 6 , cyl == 8, qsec > 16)
filter(mtcars_tbl, cyl == 6 | cyl == 8, qsec > 16)
arrange(mtcars_tbl, cyl, mpg)
arrange(mtcars_tbl, cyl, desc(mpg))
arrange(filter(select(mtcars_tbl, mpg:gear, -drat),gear>3),desc(cyl))
summarise(mtcars_tbl, avgmpg = mean(mpg), maxmpg = max(mpg), minmpg = min(mpg))
summarise(filter(mtcars_tbl, cyl == 8), avgmpg = mean(mpg), maxmpg = max(mpg), minmpg = min(mpg))
arrange(filter(mtcars_tbl, cyl == 8), mpg)
mtcars %>%
select(mpg:gear, -drat) %>%
filter(gear > 3) %>%
arrange(desc(cyl)))
mtcars %>%
select(mpg:gear, -drat) %>%
filter(gear > 3) %>%
arrange(desc(cyl))
arrange(filter(select(mtcars_tbl, mpg:gear, -drat),gear>3),desc(cyl))
mtcars_tb %>%
select(mpg:gear, -drat) %>%
filter(gear > 3) %>%
arrange(desc(cyl))
mtcars_tbl %>%
select(mpg:gear, -drat) %>%
filter(gear > 3) %>%
arrange(desc(cyl))
mtcars_tbl %>%
filter(gear > 3, cyl >= 6) %>%
arrange(cyl) %>%
summarise(maxmpg = max(mpg))
mtcars_tbl %>%
filter(gear > 3, cyl >= 6) %>%
group_by(cyl) %>%
summarise(maxmpg = max(mpg))
mtcars_tbl %>%
filter(gear > 3, cyl >= 6) %>%
group_by(cyl)
mtcars_tbl %>%
filter(gear > 3, cyl >= 6)
mtcars_tbl %>%
filter(gear > 3, cyl >= 6)
mtcars_tbl %>%
filter(gear > 3, cyl >= 6) %>%
group_by(cyl) %>%
summarise(maxmpg = max(mpg))
mtcars_tbl %>%
select(gear, cyl, mpg)
mtcars_tbl %>%
select(gear, cyl, mpg) %>%
group_by(gear, cyl)
mtcars_tbl %>%
select(gear, cyl, mpg) %>%
arrange(gear, cyl, mpg)
mtcars_tbl %>%
select(gear, cyl, mpg) %>%
filter(gear > 3, cyl >= 6) %>%
arrange(gear, cyl, mpg)
mtcars_tbl %>%
select(gear, cyl, mpg) %>%
filter(gear > 3, cyl >= 6) %>%
arrange(cyl, mpg)
mtcars_tbl %>%
filter(gear > 3, cyl >= 6) %>%
select(cyl, mpg) %>%
arrange(cyl, mpg)
mtcars_tbl %>%
filter(gear > 3, cyl >= 6) %>%
group_by(cyl) %>%
summarise(maxmpg = max(mpg))
# 1. Load mtcars into your R environment and look at the data and the way data is displayed on yr console.
data(mtcars)
# 2. Then convert mtcars data frame into mtcars tbl by > mtcars<-tbl(mtcars)
mtcars_tbl <- tbl_df(mtcars)
# 3. Compare the two displays.
mtcars
mtcars_tbl
# 4. You can also > glimpse(mtcars)  - compare the displayed data.
glimpse(mtcars)
# 5. Select from mtcars only variables mpg to wt, but not including variable hp. You can choose to keep the result in a new tbl if you want to use it later. Your output should look as follows:
select(mtcars_tbl, cyl, disp, drat, wt)
# 6. Select only the variables from mtcars cyl and carb, (ie which starts with “c”). The output should look as follows:
select(mtcars_tbl, starts_with("c"))
# 7.	Select only variables cyl, carb, drat and wt by modifiying your above code in question 6.
select(mtcars_tbl, starts_with("c"), ends_with("t"))
# 8. Then use the basic R code to achieve the same result.
#    Your result should look like this both times.
mtcars_tbl[c("cyl", "carb", "drat", "wt")]
# 9. Create a new data frame, g1, which is the data frame mtcars with an additional column:
#    hpp where hpp is hp divided by 100
g1 <- mutate(mtcars_tbl, hpp = hp/100)
head(g1)
# 10. Extract from mtcars those with 8 cyl and qseq greater than 16. Output as below:
filter(mtcars_tbl, cyl == 8, qsec > 16)
# 11. Extract from mtcars those with cyl 6 or 8 and qseq greater than 16. Output as below:
filter(mtcars_tbl, cyl == 6 | cyl == 8, qsec > 16)
# 12. Arrange mtcars by cly and mpg. Output is as follows :
arrange(mtcars_tbl, cyl, mpg)
# 13. Arrange mtcars by cyl and then by mpg in descending order. Output as follows :
arrange(mtcars_tbl, cyl, desc(mpg))
# 14. If we run the following codes, we will the output as shown below. Rewrite the code to achieve the same output but in ONE code, combining the dplyr verbs.
arrange(filter(select(mtcars_tbl, mpg:gear, -drat),gear>3),desc(cyl))
# 15. Among all cars in mtcars, find the average), the maximum, and the minimum mpg (miles per gallon ? Output should be as follows :
summarise(mtcars_tbl, avgmpg = mean(mpg), maxmpg = max(mpg), minmpg = min(mpg))
# 16. Find the same as above, but this time only for cars with 8 cylinders.
summarise(filter(mtcars_tbl, cyl == 8), avgmpg = mean(mpg), maxmpg = max(mpg), minmpg = min(mpg))
# 17. Check if the answer for question 16 is correct by listing out all the relevant rows and arranging them in  order of the mpg.
arrange(filter(mtcars_tbl, cyl == 8), mpg)
# 18. Try out the codes and understand them.
mtcars_tbl %>%
select(mpg:gear, -drat) %>%
filter(gear > 3) %>%
arrange(desc(cyl))
# 19. Using pipe operator, extract only rows/obs where gear is more than3, and cyl  bigger more or equals to 6, and then group the dataset according to cyl, and then summarise to find the maximum miles per gallon.
mtcars_tbl %>%
filter(gear > 3, cyl >= 6) %>%
group_by(cyl) %>%
summarise(maxmpg = max(mpg))
# 20. Check your answer is correct by listing out the selected dataset and arranging it accordingly so that you can easily find the max and min of each group. Write your code using  pipe operator.
mtcars_tbl %>%
filter(gear > 3, cyl >= 6) %>%
select(cyl, mpg) %>%
arrange(cyl, mpg)
dat <- read.csv("test_data.csv")
dat
library(dplyr)
dat <- read.csv("test_data.csv")
dat <- tbl_df(dat)
dat
str(dat)
group_by(dat, Tester.Type)
dat
dat %>%
group_by(Tester.Type) %>%
summarise(sum)
dat %>%
group_by(Tester.Type) %>%
summarise_each(funs(mean))
dat %>%
group_by(Tester.Type) %>%
summarise_each(funs(t.test))
j750std <- subset(dat, Tester.Type == 'J750 Std')
j750ex <- subset(dat, Tester.Type == 'J750 EX')
j750ex
str(j750ex)
names(j750ex)
j750ex[,33:]
j750ex[,33:177]
j750ex <- subset(dat, Tester.Type == 'J750 EX',select = (33:177))
str(j750)
str(j750ex)
j750std <- subset(dat, Tester.Type == 'J750 Std', select = (33:177))
j750ex <- subset(dat, Tester.Type == 'J750 EX',select = (33:177))
test_name <- names(j750std)
len(j750std)
length(j750std)
for i in length(j750std):
t.test(j750std[,i], j750ex[,i])
for i in length(j750std):
t.test(j750std[,i], j750ex[,i])
for (i in length(j750std)):
t.test(j750std[,i], j750ex[,i])
for (i in 1:length(j750std)):
t.test(j750std[,i], j750ex[,i])
for (i in c(1:length(j750std))):
t.test(j750std[,i], j750ex[,i])
c(1:length(j750std))
c(1:length(j750std))[1]
c(1:length(j750std))[4]
for (i in c(1:length(j750std))):
t.test(j750std[,i], j750ex[,i])
for (i in c(1:length(j750std))) {
t.test(j750std[,i], j750ex[,i])
}
dat
rm(list = ls())
dat <- read.csv("test_data.csv")
install.packages("tidyr")
library(tidyr)
gather(dat, Tester.Type, X210.JVT_BV_start.VDD_BV )
x <- gather(dat, Tester.Type, X210.JVT_BV_start.VDD_BV )
x
table(dat$Tester.Type)
x <- c("KOMODO_AUTO", "QUIBS")
x
library(stringr)
str_replace(x, "KOMODO_AUTO", "KOMODO")
str_replace(x, "^KO", "KOMODO")
str_replace(x, "^KO", "TEST")
str_replace(x, ^KO, "TEST")
str_replace(x, regex(^KO), "TEST")
str_replace(x, regex("^KO"), "TEST")
str_replace(x, regex("MO"), "TEST")
setwd("C:/Users/B26124/OneDrive/Data Science/2017-2018 SEM 1/WQD7001 Principle of Data Science/Assignment/Group/University_choices/mydeck")
library(slidify)
publish_rpubs(title = "University Choices", html_file = "index.html")
publish(user = "lynxvol", hosts = 'rpubs')
slidify("index.Rmd")
publish_rpubs("University Choices")
publish(title = "University Choices", "index.html", host = "rpubs")
